AWSTemplateFormatVersion: "2010-09-09"

Description: EDAV server, client, and upload URL signer

Parameters:
  ClientSecondarySubDomain:
    Type: String
    Default: ""
    Description: The URL of the client/landing

  ClientSubDomain:
    Type: String
    Default: ""
    Description: The URL of the client/landing

  CloudfrontAliases:
    Type: CommaDelimitedList
    Default: ""
    Description: CNAMES for API CDN

  CloudfrontCertificateArn:
    Type: String
    Default: ""
    Description: The AWS ARN of the SSL certificate to be used by Cloudfront

  CloudfrontPriceClass:
    Type: String
    Default: PriceClass_All
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    Description: "Price class to use for the client's Cloudfront distribution"

  CorsAllowedOrigin:
    Type: String
    Default: "*"
    Description: The allowed origins to access the APIs

  DomainName:
    Type: String
    Default: ""
    Description: The name of Amazon Route 53 hosted zone

  GatewayCertificateArn:
    Type: String
    Default: ""
    Description: The AWS ARN of the SSL certificate to be used by API Gateways

  GatewayStage:
    Type: String
    Default: Prod
    Description: The Stage name for the API Gateways

  LambdaMemory:
    Type: Number
    Default: 256
    Description: Lambda memory in MBs

  LambdaTimeout:
    Type: Number
    Default: 80
    Description: Lambda timeout in seconds

  ObjectExpiry:
    Type: Number
    Default: 900
    Description: Expiry of S3 object URL in seconds

  ServerSubDomain:
    Type: String
    Default: ""
    Description: The subdomain of the parsing server

  SignSubDomain:
    Type: String
    Default: ""
    Description: The subdomain of the uploading URL sigining API

Conditions:
  CloudfrontTLSEnabled: !Not
    - "Fn::Equals":
        - Ref: CloudfrontCertificateArn
        - ""

  EmptyClientSubDomain: !Equals
    - Ref: ClientSubDomain
    - ""

  HasClientSecondarySubDomain: !Not
    - "Fn::Equals":
        - Ref: ClientSecondarySubDomain
        - ""

  HasClientSubDomain: !Not
    - "Fn::Equals":
        - Ref: DomainName
        - ""

  HasCloudfrontAlias: !Not
    - "Fn::Equals":
        - "Fn::Join":
            - ","
            - Ref: CloudfrontAliases
        - ""

  HasServerSubDomain: !Not
    - "Fn::Equals":
        - Ref: ServerSubDomain
        - ""

  HasSignSubDomain: !Not
    - "Fn::Equals":
        - Ref: SignSubDomain
        - ""

  HasZone: !Not
    - "Fn::Equals":
        - Ref: DomainName
        - ""

  NoClientSubDomain: !Not
    - Condition: HasClientSubDomain

Transform: "AWS::Serverless-2016-10-31"

Resources:
  Client404:
    Type: "AWS::Serverless::Function"
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./client/
      Environment:
        Variables:
          NEXT_PUBLIC_EDAV_S3_SIGN_URL: !If
            - HasSignSubDomain
            - "Fn::Join":
                - .
                - - Ref: SignSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${S3SignApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
          NEXT_PUBLIC_EDAV_SERVER_URL: !If
            - HasServerSubDomain
            - "Fn::Join":
                - .
                - - Ref: ServerSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /404
            RestApiId: !Ref ClientApi
      Handler: serverless/404/handler.render
      Runtime: nodejs12.x

  ClientApi:
    Type: "AWS::Serverless::Api"
    Properties:
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'OPTIONS, GET'"
        AllowOrigin: "'*'"
      EndpointConfiguration: REGIONAL
      StageName: !Ref GatewayStage

  ClientDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: HasClientSubDomain
    Properties:
      AliasTarget:
        DNSName: !GetAtt ClientDistribution.DomainName
        EvaluateTargetHealth: true
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName: !Join
        - ""
        - - Ref: DomainName
          - .
      Name: !If
        - EmptyClientSubDomain
        - "Fn::Join":
            - ""
            - - Ref: DomainName
              - .
        - "Fn::Join":
            - ""
            - - Ref: ClientSubDomain
              - .
              - Ref: DomainName
              - .
      Type: A

  ClientDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases: !If
          - HasCloudfrontAlias
          - Ref: CloudfrontAliases
          - Ref: "AWS::NoValue"
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
            PathPattern: /_next/*
            TargetOriginId: clientStaticS3Origin
            ViewerProtocolPolicy: !If
              - CloudfrontTLSEnabled
              - redirect-to-https
              - allow-all
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
            PathPattern: /static/*
            TargetOriginId: clientStaticS3Origin
            ViewerProtocolPolicy: !If
              - CloudfrontTLSEnabled
              - redirect-to-https
              - allow-all
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404
          - ErrorCode: 500
            ResponseCode: 500
            ResponsePagePath: /error
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: clientSSROrigin
          ViewerProtocolPolicy: !If
            - CloudfrontTLSEnabled
            - redirect-to-https
            - allow-all
        Enabled: true
        HttpVersion: http2
        Logging: !Ref "AWS::NoValue"
        Origins:
          - CustomOriginConfig:
              HTTPPort: "80"
              HTTPSPort: "443"
              OriginProtocolPolicy: https-only
            DomainName: !Sub "${ClientApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: clientSSROrigin
            OriginPath: !Sub /${GatewayStage}
          - CustomOriginConfig:
              HTTPPort: "80"
              HTTPSPort: "443"
              OriginProtocolPolicy: http-only
            DomainName: !Sub ${ClientStaticBucket}.s3.amazonaws.com
            Id: clientStaticS3Origin
        PriceClass: !Ref CloudfrontPriceClass
        ViewerCertificate: !If
          - CloudfrontTLSEnabled
          - AcmCertificateArn: !Ref CloudfrontCertificateArn
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true
      Tags:
        - Key: Description
          Value: EDAV Client static files

  ClientError:
    Type: "AWS::Serverless::Function"
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./client/
      Environment:
        Variables:
          NEXT_PUBLIC_EDAV_S3_SIGN_URL: !If
            - HasSignSubDomain
            - "Fn::Join":
                - .
                - - Ref: SignSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${S3SignApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
          NEXT_PUBLIC_EDAV_SERVER_URL: !If
            - HasServerSubDomain
            - "Fn::Join":
                - .
                - - Ref: ServerSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /error
            RestApiId: !Ref ClientApi
      Handler: serverless/_error/handler.render
      Runtime: nodejs12.x

  ClientExample:
    Type: "AWS::Serverless::Function"
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./client/
      Environment:
        Variables:
          NEXT_PUBLIC_EDAV_S3_SIGN_URL: !If
            - HasSignSubDomain
            - "Fn::Join":
                - .
                - - Ref: SignSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${S3SignApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
          NEXT_PUBLIC_EDAV_SERVER_URL: !If
            - HasServerSubDomain
            - "Fn::Join":
                - .
                - - Ref: ServerSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /example
            RestApiId: !Ref ClientApi
      Handler: serverless/example/handler.render
      Runtime: nodejs12.x

  ClientIndex:
    Type: "AWS::Serverless::Function"
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./client/
      Environment:
        Variables:
          NEXT_PUBLIC_EDAV_S3_SIGN_URL: !If
            - HasSignSubDomain
            - "Fn::Join":
                - .
                - - Ref: SignSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${S3SignApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
          NEXT_PUBLIC_EDAV_SERVER_URL: !If
            - HasServerSubDomain
            - "Fn::Join":
                - .
                - - Ref: ServerSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /
            RestApiId: !Ref ClientApi
      Handler: serverless/index/handler.render
      Runtime: nodejs12.x

  ClientPrivacy:
    Type: "AWS::Serverless::Function"
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./client/
      Environment:
        Variables:
          NEXT_PUBLIC_EDAV_S3_SIGN_URL: !If
            - HasSignSubDomain
            - "Fn::Join":
                - .
                - - Ref: SignSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${S3SignApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
          NEXT_PUBLIC_EDAV_SERVER_URL: !If
            - HasServerSubDomain
            - "Fn::Join":
                - .
                - - Ref: ServerSubDomain
                  - Ref: DomainName
            - "Fn::Sub": "https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /privacy
            RestApiId: !Ref ClientApi
      Handler: serverless/privacy/handler.render
      Runtime: nodejs12.x

  ClientSecondaryDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: HasClientSecondarySubDomain
    Properties:
      AliasTarget:
        DNSName: !GetAtt ClientSecondaryDistribution.DomainName
        EvaluateTargetHealth: true
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName: !Join
        - ""
        - - Ref: DomainName
          - .
      Name: !Join
        - ""
        - - Ref: ClientSecondarySubDomain
          - .
          - Ref: DomainName
          - .
      Type: A

  ClientSecondaryDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: HasClientSecondarySubDomain
    Properties:
      DistributionConfig:
        Aliases:
          - "Fn::Join":
              - .
              - - Ref: ClientSecondarySubDomain
                - Ref: DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            Headers:
              - Origin
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref ClientSecondaryDistributionEdge.Version
          TargetOriginId: clientStaticS3Origin
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        Logging: !Ref "AWS::NoValue"
        Origins:
          - CustomOriginConfig:
              HTTPPort: "80"
              HTTPSPort: "443"
              OriginProtocolPolicy: http-only
            DomainName: !Sub ${ClientStaticBucket}.s3.amazonaws.com
            Id: clientStaticS3Origin
            OriginCustomHeaders:
              - HeaderName: x-env-baseurl
                HeaderValue: !Join
                  - ""
                  - - "Fn::If":
                        - CloudfrontTLSEnabled
                        - "https://"
                        - "http://"
                    - Ref: DomainName
        PriceClass: !Ref CloudfrontPriceClass
        ViewerCertificate: !If
          - CloudfrontTLSEnabled
          - AcmCertificateArn: !Ref CloudfrontCertificateArn
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true
      Tags:
        - Key: Description
          Value: EDAV redirect secondary subdomain to root

  ClientSecondaryDistributionEdge:
    Type: "AWS::Serverless::Function"
    Properties:
      AutoPublishAlias: live
      CodeUri: edge/
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt ClientSecondaryDistributionEdgeRole.Arn
      Runtime: nodejs12.x
      Timeout: 5

  ClientSecondaryDistributionEdgeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /

  ClientStaticBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead

  ClientStaticBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ClientStaticBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - Ref: ClientStaticBucket
                - /*

  DesignUploadBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 1
            Id: UploadBucketCleanup
            Status: Enabled

  S3Sign:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: s3sign/
      Environment:
        Variables:
          EXPIRY: !Ref ObjectExpiry
          S3_BUCKET: !Ref DesignUploadBucket
      Events:
        Sign:
          Type: Api
          Properties:
            Method: get
            Path: /
            RestApiId: !Ref S3SignApi
      Handler: index.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DesignUploadBucket
      Runtime: nodejs12.x

  S3SignApi:
    Type: "AWS::Serverless::Api"
    Properties:
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'OPTIONS, GET'"
        AllowOrigin: !Sub "'${CorsAllowedOrigin}'"
      EndpointConfiguration: REGIONAL
      StageName: !Ref GatewayStage

  S3SignApiDNSRecord:
    Type: "AWS::Route53::RecordSetGroup"
    Condition: HasSignSubDomain
    Properties:
      HostedZoneName: !Join
        - ""
        - - Ref: DomainName
          - .
      RecordSets:
        - Name: !Join
            - .
            - - Ref: SignSubDomain
              - Ref: DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt S3SignApiGatewayDomainName.RegionalDomainName
            EvaluateTargetHealth: false
            HostedZoneId: !GetAtt S3SignApiGatewayDomainName.RegionalHostedZoneId

  S3SignApiGatewayDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Condition: HasSignSubDomain
    Properties:
      DomainName: !Join
        - .
        - - Ref: SignSubDomain
          - Ref: DomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref GatewayCertificateArn

  S3SignApiMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: HasSignSubDomain
    DependsOn:
      - S3SignApiStage
    Properties:
      BasePath: ""
      DomainName: !Ref S3SignApiGatewayDomainName
      RestApiId: !Ref S3SignApi
      Stage: !Ref S3SignApiStage

  Server:
    Type: "AWS::Serverless::Function"
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: server
      Environment:
        Variables:
          EXPIRY: !Ref ObjectExpiry
          S3_BUCKET: !Ref DesignUploadBucket
      Events:
        UploadHandler:
          Type: Api
          Properties:
            Method: post
            Path: /
            RestApiId: !Ref ServerApi
      Handler: edav-server
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DesignUploadBucket
      Runtime: go1.x

  ServerApi:
    Type: "AWS::Serverless::Api"
    Properties:
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'OPTIONS, GET, POST'"
        AllowOrigin: !Sub "'${CorsAllowedOrigin}'"
      EndpointConfiguration: REGIONAL
      StageName: !Ref GatewayStage

  ServerApiDNSRecord:
    Type: "AWS::Route53::RecordSetGroup"
    Condition: HasServerSubDomain
    Properties:
      HostedZoneName: !Join
        - ""
        - - Ref: DomainName
          - .
      RecordSets:
        - Name: !Join
            - .
            - - Ref: ServerSubDomain
              - Ref: DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt ServerApiGatewayDomainName.RegionalDomainName
            EvaluateTargetHealth: false
            HostedZoneId: !GetAtt ServerApiGatewayDomainName.RegionalHostedZoneId

  ServerApiGatewayDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Condition: HasServerSubDomain
    Properties:
      DomainName: !Join
        - .
        - - Ref: ServerSubDomain
          - Ref: DomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref GatewayCertificateArn

  ServerApiMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: HasServerSubDomain
    DependsOn:
      - ServerApiStage
    Properties:
      BasePath: ""
      DomainName: !Ref ServerApiGatewayDomainName
      RestApiId: !Ref ServerApi
      Stage: !Ref ServerApiStage

Outputs:
  ApplicationURL:
    Description: The URL to access the deployed application
    Value: !Join
      - ""
      - - "Fn::If":
            - CloudfrontTLSEnabled
            - "https://"
            - "http://"
        - "Fn::If":
            - HasClientSubDomain
            - "Fn::If":
                - EmptyClientSubDomain
                - Ref: DomainName
                - "Fn::Join":
                    - .
                    - - Ref: ClientSubDomain
                      - Ref: DomainName
            - "Fn::GetAtt":
                - ClientDistribution
                - DomainName

  ClientEndpoint:
    Value: !Sub "https://${ClientApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"

  ClientStaticBucket:
    Value: !Ref ClientStaticBucket

  CloudfrontDomain:
    Description: Client Cloudfront domain name
    Value: !GetAtt ClientDistribution.DomainName

  DesignUploadBucket:
    Value: !Ref DesignUploadBucket

  S3SignEndpoint:
    Value: !If
      - HasSignSubDomain
      - "Fn::Join":
          - .
          - - Ref: SignSubDomain
            - Ref: DomainName
      - "Fn::Sub": "https://${S3SignApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"

  ServerEndpoint:
    Value: !If
      - HasServerSubDomain
      - "Fn::Join":
          - .
          - - Ref: ServerSubDomain
            - Ref: DomainName
      - "Fn::Sub": "https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayStage}"

Globals:
  Function:
    MemorySize: !Ref LambdaMemory
    Timeout: !Ref LambdaTimeout